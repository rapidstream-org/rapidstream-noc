"""Frontend to run the NoC pass."""

__copyright__ = """
Copyright (c) 2024 RapidStream Design Automation, Inc. and contributors.
All rights reserved. The contributor(s) of this file has/have agreed to the
RapidStream Contributor License Agreement.
"""

import json
import sys
from enum import Enum
from typing import Any

from gen_vivado_bd import gen_sim_bd
from noc_pass import ilp_noc_selector
from vp1802_nocgraph import vp1802_nocgraph


def parse_top_mod(ir: dict[str, Any]) -> Any:
    """Parses the top_mod dict in the Rapidstream IR.

    Return a dictionary.

    Example:
    >>> design = {
    ...     "modules": {
    ...         "top_name": "FINDME",
    ...         "module_definitions": [{"name": "FINDME"}],
    ...     }
    ... }
    >>> parse_top_mod(design)
    {'name': 'FINDME'}
    """
    top_mod = ir["modules"]["top_name"]
    for mod in ir["modules"]["module_definitions"]:
        if mod["name"] == top_mod:
            return mod
    raise AssertionError()


class IREnum(Enum):
    """Enums to parse Rapidstream NOC IR."""

    PIPELINE = "__rs_hs_pipeline"
    REGION = "REGION"
    HEAD_REGION = "__HEAD_REGION"
    TAIL_REGION = "__TAIL_REGION"


def parse_inter_slot(
    ir: dict[str, Any],
) -> tuple[dict[str, dict[str, str]], dict[str, int]]:
    """Parses the cross-slot streams in the Rapidstream NOC IR.

    Puts each stream's source slot range in "src".
    Puts each stream's destination slot range in "dest".
    Manually assigns all streams' "bandwidth" to 16000 MBps.

    Returns a dictionary of streams' slots
    and a dictionary of streams' bandwidth targets.
    """
    slots: dict[str, dict[str, str]] = {}
    bw: dict[str, int] = {}
    for sub_mod in ir["submodules"]:
        if sub_mod["module"] == IREnum.PIPELINE.value:
            if any(IREnum.REGION.value in p["name"] for p in sub_mod["parameters"]):
                slots[sub_mod["name"]] = {}
                bw[sub_mod["name"]] = 16000
                for p in sub_mod["parameters"]:
                    if p["name"] == IREnum.HEAD_REGION.value:
                        src = p["expr"][0]["repr"][1:-1]
                        slots[sub_mod["name"]]["src"] = src
                    if p["name"] == IREnum.TAIL_REGION.value:
                        dest = p["expr"][0]["repr"][1:-1]
                        slots[sub_mod["name"]]["dest"] = dest

    return slots, bw


if __name__ == "__main__":
    # command line inputs
    NUM_CMD_IN = 2
    if len(sys.argv) < NUM_CMD_IN:
        print("Please provide the JSON file generated by Rapidstream's NOC pass.")
        sys.exit(1)

    # autobridge json file to extract
    json_file = sys.argv[1]
    with open(json_file, "r", encoding="utf-8") as file:
        design = json.load(file)
        design_top = parse_top_mod(design)
        streams_slots, streams_bw = parse_inter_slot(design_top)
        streams_slots = dict(
            sorted(streams_slots.items(), key=lambda x: int(x[0].split("_")[2]))
        )
        streams_bw = dict(
            sorted(streams_bw.items(), key=lambda x: int(x[0].split("_")[2]))
        )

        # print(random_selector(streams_slots))

        # G = nx.nx_pydot.read_dot("vp1802_noc.dot")
        G = vp1802_nocgraph(num_slr=4, num_col=4, rows_per_slr=[7, 6, 6, 6])

        # test = {"a": {"bandwidth": 16000,
        #               "src": "SLOT_X0Y0_TO_SLOT_X0Y0",
        #               "dest": "SLOT_X1Y1_TO_SLOT_X1Y1"}}
        noc_streams = ilp_noc_selector(streams_slots, streams_bw, G)
        print(noc_streams)

        noc_stream_ports = {}
        for s in noc_streams:
            IDX = "_".join(s.split("_")[2:4])
            noc_stream_ports[f"m_axis_{IDX}"] = f"s_axis_{IDX}"

        gen_sim_bd(
            rtl_folder="/home/jakeke/tapa/apps/stencil/32pe/run_noc/hdl",
            top_mod="jacobi2d_kernel",
            mmap_ports=[
                "m_axi_var_input_0_0",
                "m_axi_var_input_0_1",
                "m_axi_var_input_0_2",
                "m_axi_var_input_0_3",
                "m_axi_var_output_0_0",
                "m_axi_var_output_0_1",
                "m_axi_var_output_0_2",
                "m_axi_var_output_0_3",
            ],
            stream_ports=noc_stream_ports,
        )
